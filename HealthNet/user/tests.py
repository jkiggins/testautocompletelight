from django.test import TestCase

from .models import *
from hospital.models import Hospital
from emr.models import *
from django.contrib.auth.models import User
from django.utils import timezone
import datetime

def setup_environment():
    
    Hospital.objects.all().delete()
    User.objects.all().delete()
    Doctor.objects.all().delete()
    Patient.objects.all().delete()

    h = Hospital.objects.create(name="The Hospital")
    h.save()

    ud = User.objects.create_user(
                username="drstrange",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Doctor",
                last_name="Strange"
            )
    ud.save()
    d = Doctor.objects.create(user=ud)
    d.hospitals.add(h)
    d.save()




    up = User.objects.create_user(
                username="patientzero",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Patient",
                last_name="Zero")
    up.save()

    emr = EMR.objects.create()
    emr.save()

    p = Patient.objects.create(user=up, doctor = d, hospital=h, emr=emr)
    p.save()

    up = User.objects.create_user(
        username="patientone",  # cleaned_data is autogenerated data. can be modified in form
        password="pass",
        email="",
        first_name="Patient",
        last_name="One")
    up.save()

    emr = EMR.objects.create()
    emr.save()

    p = Patient.objects.create(user=up, doctor=d, hospital=h, emr=emr)
    p.save()


    un = User.objects.create_user(
                username="nursenormal",  # cleaned_data is autogenerated data. can be modified in form
                password="pass",
                email="",
                first_name="Nurse",
                last_name="Normal")
    un.save()
    n = Nurse.objects.create(user=un, hospital=h)
    n.save()

    return True
                             


class EventTest(TestCase):
    def test_setup_environment(self):
        """This test simply makes sure we can set up a database environment"""
        setup_environment()
        self.assertEqual(Doctor.objects.all().count(), 1)
        self.assertEqual(Nurse.objects.all().count(), 1)
        self.assertEqual(Patient.objects.all().count(), 2)
        self.assertEqual(User.objects.all().count(), 4)

    def test_event_conflict(self):
        """
        Tests the event validation method with conflicting events
        0 - No conflicts
        1 - The event is too long and extends into another event
        2 - The event starts before the end of another event
        NOTE: a buffer of 15 minuets is required between appointments
        """

        setup_environment()
        d = Doctor.objects.all()[0]
        h = d.hospitals.all()[0]
        p = Patient.objects.all()[0]
        st = timezone.now()
        et = st + datetime.timedelta(minutes=30)
        p1 = Patient.objects.all()[1]
        delta15 = datetime.timedelta(minutes=12)

        e = Event(doctor=d, patient=p, hospital=h, appointment=True,
                  description="an appointment", startTime=st, endTime=et)

        self.assertEqual(e.conflicts(), 0)
        e.save()
        self.assertEqual(Event.objects.all().count(), 1)

        e = Event(doctor=d, hospital=h, appointment=False,
                  description="not an appointment", startTime=st+delta15, endTime=et+delta15)

        self.assertEqual(e.conflicts(), 2)
        self.assertEqual(Event.objects.all().count(), 1)

        e = Event(doctor=d, patient=p1, hospital=h, appointment=False,
                  description="not an appointment", startTime=st-delta15, endTime=et-delta15)

        self.assertEqual(e.conflicts(), 1)
        self.assertEqual(Event.objects.all().count(), 1)
